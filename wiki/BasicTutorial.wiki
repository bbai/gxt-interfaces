#summary This tutorial provides a simple overview for setting up and using the gxt-interfaces project.
#labels Phase-Implementation,Featured

== Goals ==
One of the main problems of the GXT framework is it's *untestability* - in a nutshell, the GXT visual components cannot be mocked (via such frameworks as _Mockito_ or _EasyMock_), making any attempt to *test* the code (in the JVM) virtually impossible. 
In order to address this problem, the gxt-interfaces project essentially creates a *thin layer* on top of GXT, in order to allow the client code to work with *interfaces* instead of the actual GXT classes. The immediate benefit is that everything becomes testable. 

== Testing in the JVM vs GWTTestCase ==
There are several disadvantages of using the provided GWTTestCase class when doing unit testing. First, testing is painfully slow, so much so that running a moderate sized suite of tests will take many minutes; this makes running the suite difficult during the development cycle. The alternative is running the tests in the JVM, orders of magnitude faster. 
Another noticeable difference between is the option of frameworks: GWTTestCase uses _JUnit 3_ and only _JUnit 3_, whereas in the JVM you can test with the framework of your choosing. A recommendation would be _JUnit 4_ and _Mockito_. 
Speed is not the only reason you should prefer tests running in the JVM. Another reason is that writing tests for the JVM will force you to keep the design clean, by separating the the visual elements and the business logic. One possible way of achieving this is the MVP pattern. 


== Setup (draft) ==
 * include the gxt-interfaces jar on the classpath of your project (via manual inclusion, maven or some other type of dependency management)
 * inherit the GXTInterfaces module from within your application module (no package required)
`<inherits name='GXTInterfaces'/>`
 * done


== Usage and examples ==
- instead of: 
` Button button = new Button();`

use: 
` IButton button = new VButton();`

- or more generic: 
` IComponent button = new VButton();`



== Mocking ==
=== -with Mockito- ===

- mocking a button: 

`IButton buttonMock = Mockito.mock( IButton.class );`



== Test sample (draft) ==
{{{
@Test
public void serverCommunicationStarted_theActionButtonIsDisabled(){
   // Arrange
   final IButton buttonMock = Mockito.movck( IButton.class ); 

   // Act
   buttonMock.disable(); 

   // Assert
   Mockito.verify( buttonMock ).disable(); 
}
}}}